Got it 👍 Let’s go step by step and cover **Functions in Python** in detail.

---

## 🔹 What is a Function?

A **function** is a block of reusable code that performs a specific task.

* Instead of writing the same code again and again, you put it inside a function and **call** it whenever needed.
* Functions make code **modular, readable, and reusable**.

---

## 🔹 Defining a Function

In Python, you use the `def` keyword.

### ✅ Syntax

```python
def function_name(parameters):
    """docstring (optional): explains what the function does"""
    # code block
    return value   # optional
```

### ✅ Example
______________________________________________________________________________________________________________
```python
def greet(name):
    """This function greets a person by name."""
    return f"Hello, {name}!"
```
🔹 What is an f-string?

Introduced in Python 3.6+.

Stands for formatted string literal.

You write an f before the string, and then you can directly insert variables or even expressions inside {}.

✅ Example
name = "Harsh"
age = 23

print(f"My name is {name} and I am {age} years old.")
______________________________________________________________________________________________________________

👉 Usage:

```python
print(greet("Harsh"))   # Hello, Harsh!
```

---

## 🔹 Function Components

1. **Name** → identifier you choose (`greet`)
2. **Parameters (optional)** → inputs to the function
3. **Docstring (optional)** → documentation inside triple quotes
4. **Body** → block of code
5. **Return statement (optional)** → gives output back to the caller

---

## 🔹 Types of Functions

1. **Built-in functions** → already available in Python

   * Examples: `print()`, `len()`, `sum()`, `max()`, `range()`

2. **User-defined functions** → functions you create with `def`

3. **Lambda (anonymous) functions** → short one-line functions with `lambda`

---

## 🔹 Parameters vs Arguments

* **Parameter** → variable in function definition (`name` in `def greet(name)`)
* **Argument** → actual value you pass (`"Harsh"` when calling `greet("Harsh")`)

---

## 🔹 Types of Function Arguments

1. **Positional Arguments**

   ```python
   def add(a, b):
       return a + b

   print(add(5, 3))  # 8
   ```

   (Order matters)

2. **Keyword Arguments**

   ```python
   print(add(b=3, a=5))  # 8
   ```

   (Order doesn’t matter if you specify keywords)

3. **Default Arguments**

   ```python
   def greet(name="Guest"):
       return f"Hello, {name}"

   print(greet())        # Hello, Guest
   print(greet("Harsh")) # Hello, Harsh
   ```

4. **Variable-Length Arguments**

   * `*args` → multiple positional arguments (tuple)
   * `**kwargs` → multiple keyword arguments (dictionary)

   ```python
   def demo(*args, **kwargs):
       print("Positional:", args)
       print("Keyword:", kwargs)

   demo(1, 2, 3, name="Harsh", age=23)
   # Positional: (1, 2, 3)
   # Keyword: {'name': 'Harsh', 'age': 23}
   ```

---

## 🔹 Lambda (Anonymous) Functions

Used for **short one-line functions**:

```python
square = lambda x: x * x
print(square(5))  # 25
```

Often used with `map()`, `filter()`, `sorted()`.

---

## 🔹 Scope of Variables

* **Local variable** → defined inside a function, accessible only there.
* **Global variable** → defined outside all functions, accessible everywhere.

```python
x = 10  # global

def test():
    x = 5  # local
    print(x)

test()       # 5
print(x)     # 10
```

---

## 🔹 Cheat Sheet

| Feature          | Example                  |
| ---------------- | ------------------------ |
| Define function  | `def func(): ...`        |
| Call function    | `func()`                 |
| Return value     | `return x`               |
| Default argument | `def f(x=5): ...`        |
| `*args`          | variable positional args |
| `**kwargs`       | variable keyword args    |
| Lambda           | `lambda x: x+1`          |

---

👉 Functions are **building blocks** of Python programs.
Would you like me to also explain **recursion (functions calling themselves)** with examples, or keep it at this level for now?
